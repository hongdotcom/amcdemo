<?php

namespace common\components;

use common\models\Permission;
use common\models\WebLang;
use common\helpers\Url;
use yii\base\ActionFilter;
use Yii;
use yii\di\Instance;
use yii\web\ForbiddenHttpException;
use yii\web\User;

class AccessControlNew extends ActionFilter {

    /**
     * @var User|array|string the user object representing the authentication status or the ID of the user application component.
     * Starting from version 2.0.2, this can also be a configuration array for creating the object.
     */
    public $user = 'user';

    /**
     * @var callable a callback that will be called if the access should be denied
     * to the current user. If not set, [[denyAccess()]] will be called.
     *
     * The signature of the callback should be as follows:
     *
     * ```php
     * function ($rule, $action)
     * ```
     *
     * where `$rule` is the rule that denies the user, and `$action` is the current [[Action|action]] object.
     * `$rule` can be `null` if access is denied because none of the rules matched.
     */
    public $denyCallback;
    public $publicRoute;
    private $currentRoute;
    private $request;

    public function init() {
        parent::init();
        $this->user = Instance::ensure($this->user, User::className());

        $this->request = Yii::$app->request;
    }

    public function beforeAction($action) {
        $user = $this->user;
        $this->currentRoute = Url::normalizeRoute($action->id);

        if ($this->checkPublicRoute() == FALSE) {
            /** @var Permission $route */
            if (($permission = $this->getPermission()) == NULL)
                $this->denyAccess($action);

            if (!$permission->status) {
                $this->denyAccess($action);
            }

            if (!$user->isGuest) {
                if ($permission->rolePermission == NULL) {
                    $this->denyAccess($action);
                }
            } else {
                call_user_func($this->denyCallback, null, $action);
            }
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool|Permission
     */
    private function getPermission() {
        /** @var Permission[] $permissions */
        $permissions = Permission::find()
                ->joinWith([
                    'module',
                ])
                ->where([
                    'interface' => Yii::$app->params['interface']
                ])
                ->andFilterWhere(['LIKE', 'route', $this->currentRoute])
                ->all();

        if (empty($permissions))
            return NULL;

        foreach ($permissions as $permission) {
            $temp = explode('?', $permission->route);
            $route = $temp[0];

            if (isset($temp[1]))
                $params = $temp[1];
            else
                $params = [];

            if ($route != $this->currentRoute)
                continue;

            if (empty(Yii::$app->request->queryParams) && !empty($params))
                continue;
            else if (!empty(Yii::$app->request->queryParams) && !empty($params)) {
                $temp = explode('&', $params);

                $params = [];
                foreach ($temp as $param) {
                    $_param = explode('=', $param);
                    $params[$_param[0]] = $_param[1];
                }

                if (empty(array_diff_assoc(Yii::$app->request->queryParams, $params)) && empty(array_diff_assoc($params, Yii::$app->request->queryParams)))
                    return $permission;
            } else
                return $permission;
        }

        return NULL;
    }

    /**
     * Check with defined route if current route is public
     * @return bool
     */
    private function checkPublicRoute() {
        if (!empty($this->publicRoute)) {
            if (in_array($this->currentRoute, $this->publicRoute) !== FALSE)
                return TRUE;
        }
        return FALSE;
    }

    protected function denyAccess($action) {
        if ($this->request->isAjax) {
            $data['success'] = FALSE;
            $data['msg'] = WebLang::t('no_permission');
            echo json_encode($data);
            exit();
        } else {
//            if (!$action instanceof ErrorAction) {
//                Yii::$app->languagepicker->init();
//                throw new ForbiddenHttpException($this->msg[WebLang::NOT_ENOUGH_PERMISSION]);
//            }
            Yii::$app->response->content = Yii::$app->controller->render('@common/views/error', [
                'message' => WebLang::t('no_permission')
            ]);

            Yii::$app->end();
        }
//        throw new ForbiddenHttpException(WebLang::getByLocaleId('no_permission'));
    }

}
